---
- name: Configurar VM clonada con Cloud-Init
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../vars/api.yml
    - ../vars/cliente_vm.yml
    - ../vars/db.yml

  tasks:
    # Verificar conexión a base de datos
    - name: Verificar conexión a la base de datos
      shell: mysql -h {{ db_host }} -u {{ db_user }} -p{{ db_password }} {{ db_name }} -e "SELECT 1"
      register: db_check
      ignore_errors: yes
      changed_when: false
      no_log: true

    # Obtener última VM en estado 'en_proceso'
    - name: Obtener última VM en estado 'en_proceso'
      shell: mysql -h {{ db_host }} -u {{ db_user }} -p{{ db_password }} {{ db_name }} -e "SELECT vmid, hostname, ip FROM vms WHERE estado = 'en_proceso' ORDER BY id DESC LIMIT 1" --skip-column-names
      register: vm_info
      changed_when: false
      when: db_check.rc == 0

    # Extraer información de la VM
    - name: Extraer información de la VM
      set_fact:
        vm_data: "{{ vm_info.stdout.split() }}"
      when: vm_info.stdout is defined and vm_info.stdout != ''

    # Definir variables individuales
    - name: Definir variables de la VM
      set_fact:
        current_vmid: "{{ vm_data[0] | int }}"
        current_hostname: "{{ vm_data[1] }}"
        current_ip: "{{ vm_data[2] }}"
      when: vm_data is defined

    # Mostrar información
    - name: Mostrar información de configuración
      debug:
        msg:
          - "Configurando VM con los siguientes parámetros:"
          - "VMID: {{ current_vmid }}"
          - "Hostname: {{ current_hostname }}"
          - "IP: {{ current_ip }}"

    # Configurar Cloud-Init
    - name: Aplicar configuración Cloud-Init
      uri:
        url: "https://{{ api_host }}:8006/api2/json/nodes/{{ proxmox_node }}/qemu/{{ current_vmid }}/config"
        method: POST
        headers:
          Authorization: "PVEAPIToken={{ api_user }}!{{ api_token_id }}={{ api_token_secret }}"
        body_format: form-urlencoded
        body:
          cores: "{{ cliente_vms[0].cores }}"
          memory: "{{ cliente_vms[0].memory }}"
          ciuser: "{{ cliente_vms[0].user }}"
          cipassword: "{{ cliente_vms[0].password }}"
          "ipconfig0": "ip={{ current_ip }}/24,gw=172.16.56.1"
        validate_certs: false
      register: config_result

    # Actualizar estado en la base de datos
    - name: Actualizar estado en la base de datos
      shell: mysql -h {{ db_host }} -u {{ db_user }} -p{{ db_password }} {{ db_name }} -e "UPDATE vms SET estado = 'por_inventariar' WHERE vmid = {{ current_vmid }}"
      when: config_result is success