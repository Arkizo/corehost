---
- name: Clonar VM desde plantilla base usando API Proxmox
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../vars/api.yml
    - ../vars/cliente_vm.yml
    - ../vars/db.yml

  tasks:
    # Verificar conexión a base de datos
    - name: Verificar conexión a la base de datos
      shell: mysql -h {{ db_host }} -u {{ db_user }} -p{{ db_password }} {{ db_name }} -e "SELECT 1"
      register: db_check
      ignore_errors: yes
      changed_when: false
      no_log: true

    # Obtener siguiente VMID de la base de datos
    - name: Obtener siguiente VMID desde base de datos
      shell: mysql -h {{ db_host }} -u {{ db_user }} -p{{ db_password }} {{ db_name }} -e "SELECT COALESCE(MAX(vmid), 499) + 1 FROM vms" --skip-column-names
      register: db_vmid_result
      changed_when: false
      when: db_check.rc == 0

    # Definir VMID como entero
    - name: Definir VMID
      set_fact:
        next_vmid: "{{ (db_vmid_result.stdout | trim) | int }}"
      when: db_vmid_result is defined

    # Obtener siguiente hostname
    - name: Obtener siguiente hostname
      shell: mysql -h {{ db_host }} -u {{ db_user }} -p{{ db_password }} {{ db_name }} -e "SELECT CONCAT('ch-', LPAD(COALESCE(MAX(SUBSTRING_INDEX(hostname, '-', -1)), 0) + 1, 2, '0')) FROM vms WHERE hostname LIKE 'ch-%'" --skip-column-names
      register: hostname_result
      changed_when: false
      when: db_check.rc == 0

    # Definir hostname
    - name: Definir hostname
      set_fact:
        next_hostname: "{{ hostname_result.stdout | trim }}"
      when: hostname_result is defined

    # Obtener siguiente IP
    - name: Obtener siguiente IP
      shell: mysql -h {{ db_host }} -u {{ db_user }} -p{{ db_password }} {{ db_name }} -e "SELECT CONCAT('172.16.56.', COALESCE(MAX(CONVERT(SUBSTRING_INDEX(ip, '.', -1), UNSIGNED)), 149) + 1) FROM vms WHERE ip LIKE '172.16.56.%'" --skip-column-names
      register: ip_result
      changed_when: false
      when: db_check.rc == 0

    # Definir IP
    - name: Definir IP
      set_fact:
        next_ip: "{{ ip_result.stdout | trim }}"
      when: ip_result is defined

    # Mostrar valores
    - name: Mostrar información VM
      debug:
        msg:
          - "VMID: {{ next_vmid }}"
          - "Hostname: {{ next_hostname }}"
          - "IP: {{ next_ip }}"

    # Clonar VM
    - name: Clonar plantilla
      uri:
        url: "https://{{ api_host }}:8006/api2/json/nodes/{{ proxmox_node }}/qemu/9000/clone"
        method: POST
        headers:
          Authorization: "PVEAPIToken={{ api_user }}!{{ api_token_id }}={{ api_token_secret }}"
        body_format: form-urlencoded
        body:
          newid: "{{ next_vmid }}"
          name: "{{ next_hostname }}"
          full: "1"
          storage: "thin_storage"
        validate_certs: false
      register: clone_result

    # Esperar a que termine la clonación
    - name: Esperar a que termine el proceso de clonación
      uri:
        url: "https://{{ api_host }}:8006/api2/json/nodes/{{ proxmox_node }}/tasks/{{ clone_result.json.data }}/status"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ api_user }}!{{ api_token_id }}={{ api_token_secret }}"
        validate_certs: false
        status_code: 200
      register: task_status
      until: task_status.json.data.status == 'stopped'
      retries: 24
      delay: 10
      when: clone_result is success

    # Registrar en base de datos
    - name: Registrar VM en la base de datos
      shell: mysql -h {{ db_host }} -u {{ db_user }} -p{{ db_password }} {{ db_name }} -e "INSERT INTO vms (cliente_id, vmid, hostname, ip, cores, memory, estado, plantilla_base) VALUES (1, {{ next_vmid }}, '{{ next_hostname }}', '{{ next_ip }}', {{ cliente_vms[0].cores }}, {{ cliente_vms[0].memory }}, 'en_proceso', 'Ubuntu')"
      when: task_status is defined and task_status.json.data.status == 'stopped'