---
- name: Iniciar VM configurada y finalizar proceso
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../vars/api.yml
    - ../vars/db.yml
  tasks:
    - name: Verificar conexión a la base de datos
      command: >
        mysql -h {{ db_host }} -u {{ db_user }} -p{{ db_password }} {{ db_name }} -e "SELECT 1"
      register: db_check
      ignore_errors: yes
      changed_when: false
      no_log: true

    - name: Obtener última VM con estado 'por_inventariar'
      command: >
        mysql -h {{ db_host }} -u {{ db_user }} -p{{ db_password }} {{ db_name }}
        -e "SELECT vmid, hostname, ip FROM vms WHERE estado = 'por_inventariar' ORDER BY id DESC LIMIT 1" --skip-column-names
      register: vm_info
      changed_when: false
      when: db_check.rc == 0

    - name: Extraer información de la VM
      set_fact:
        current_vmid: "{{ vm_info.stdout.split()[0] | int }}"
        current_hostname: "{{ vm_info.stdout.split()[1] }}"
        current_ip: "{{ vm_info.stdout.split()[2] }}"
      when:
        - db_check.rc == 0
        - vm_info.stdout is defined
        - vm_info.stdout != ''

    - name: Mostrar información de la VM a iniciar
      debug:
        msg:
          - "Iniciando VM:"
          - "VMID: {{ current_vmid }}"
          - "Hostname: {{ current_hostname }}"
          - "IP: {{ current_ip }}"
      when: current_vmid is defined

    - name: Iniciar la VM
      ansible.builtin.uri:
        url: "https://{{ api_host }}:8006/api2/json/nodes/{{ proxmox_node }}/qemu/{{ current_vmid }}/status/start"
        method: POST
        headers:
          Authorization: "PVEAPIToken={{ api_user }}!{{ api_token_id }}={{ api_token_secret }}"
        validate_certs: false
      register: start_result
      when: current_vmid is defined

    - name: Esperar a que arranque la VM
      ansible.builtin.uri:
        url: "https://{{ api_host }}:8006/api2/json/nodes/{{ proxmox_node }}/qemu/{{ current_vmid }}/status/current"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ api_user }}!{{ api_token_id }}={{ api_token_secret }}"
        validate_certs: false
      register: vm_running_status
      until: vm_running_status.json.data.status == 'running'
      retries: 30
      delay: 5
      when: start_result is success

    - name: Actualizar estado en la base de datos a 'completado'
      command: >
        mysql -h {{ db_host }} -u {{ db_user }} -p{{ db_password }} {{ db_name }}
        -e "UPDATE vms SET estado = 'completado' WHERE vmid = {{ current_vmid }}"
      when:
        - vm_running_status is success
        - vm_running_status.json.data.status == 'running'